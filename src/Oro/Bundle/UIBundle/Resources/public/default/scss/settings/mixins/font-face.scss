/* @theme: default; */
@use 'sass:list';

// Use: @include font-face('Poppins', '../fonts/poppins/Poppins-Italic-subset', 400, normal, ('woff'), swap);
@mixin font-face(
    $font-family,
    $file-path,
    $font-weight,
    $font-style,
    $font-formats,
    $font-display: swap,
    $font-unicode-range: null
) {
    @font-face {
        font-family: $font-family;

        @if ($font-formats) {
            $src: null;
            $url: null;

            @each $font-format in $font-formats {
                $i: list.index($font-formats, $font-format);

                @if ($font-format == 'ttf') {
                    $url: url('#{$file-path}.#{$font-format}') format('truetype');
                } @else if ($font-format == 'svg') {
                    $url: url('#{$file-path}.#{$font-format}##{$font-family}') format('#{$font-format}');
                } @else {
                    $url: url('#{$file-path}.#{$font-format}') format('#{$font-format}');
                }

                @if ($i == 1) {
                    $src: $url;
                } @else {
                    $src: $src#{', '}$url;
                }
            }

            src: $src;
        } @else {
            src: url('#{$file-path}.woff') format('woff');

            @warn "The $font-formats argument doesn't exist";
        }

        font-weight: $font-weight;
        font-style: $font-style;
        font-display: $font-display;
        unicode-range: $font-unicode-range;
    }
}

// Parse list with $fonts and call Mixin font-face();
// $fonts: (
//     'main': (
//         'family': 'Test1',
//         'variants': (
//             (
//                 'path': '...',
//                 'weight': normal,
//                 'style': normal
//             ),
//             (
//                 'path': '..',
//                 'weight': 700,
//                 'style': normal
//             )
//         ),
//         'formats': ('woff2', 'woff', 'ttf', 'eot', 'svg') // Add only needed formats
//     ),
//     'secondary': (
//         'family': 'Test2',
//         'variants': (
//             (
//                 'path': '...',
//             )
//         ),
//         'formats': ('woff2', 'woff', 'ttf', 'eot', 'svg') // Add only needed formats
//     )
// );
// Use: @include use-font-face($fonts);
@mixin include-font-face(
    $font-family,
    $file-path,
    $font-weigh,
    $font-style,
    $font-formats,
    $font-display,
    $font-unicode-range
) {
    @if ($font-family and $file-path) {
        // Calling mixin font-face(family, path, $weigh, style);
        @include font-face(
            $font-family,
            $file-path,
            $font-weigh,
            $font-style,
            $font-formats,
            $font-display,
            $font-unicode-range
        );
    } @else {
        @warn 'Absent family or path keys in a list.';
    }
}

@mixin use-font-face($fonts: ()) {
    // Iterate index;
    $font-index: 0;

    // List with section keys
    // ('main', 'secondary', 'icon')
    $font-names: map_keys($fonts);

    @if (length($fonts) >= 1) {
        @each $font in $fonts {
            $font-index: $font-index + 1;

            // Iterate section name
            // 'main' or 'secondary' or 'icon' or '...'
            $current-section-name: list.nth($font-names, $font-index);

            // Iterate section
            // (
            //    'family': '...',
            //    'variants': (
            //       (
            //            'path': '...',
            //            'weight': normal,
            //            'style': normal
            //        )
            //     )
            //  )
            $current-section: map_get($fonts, $current-section-name);

            // Iterate 'variants' section
            // (
            //     (
            //         'path': '...',
            //         'weight': normal,
            //         'style': normal
            //     )
            // )

            // Iterate font variants
            $font-variants: map_get($current-section, 'variants');

            $font-formats: map_get($current-section, 'formats');

            @if (type-of($font-variants) == 'map' or type-of($font-variants) == 'list') {
                // Get Iterate section 'family'
                $font-family: map_get($current-section, 'family');

                // Default value
                $file-path: null;

                // Default value
                $font-weigh: null;

                // Default value
                $font-style: null;

                @if (type-of($font-variants) == 'map') {
                    $file-path: map_get($font-variants, 'path');
                    $font-display: swap;
                    $font-unicode-range: null;

                    // Sections 'variants' and 'style' not required.
                    // Update only if They are defined in iterate  section.
                    @if (map_has_key($font-variants, 'weight')) {
                        $font-weigh: map_get($font-variants, 'weight');
                    }

                    @if (map_has_key($font-variants, 'style')) {
                        $font-style: map_get($font-variants, 'style');
                    }

                    @if (map_has_key($font-variants, 'unicode-range')) {
                        $font-unicode-range: map_get($font-variants, 'unicode-range');
                    }

                    @if (map_has_key($font-variants, 'display')) {
                        $font-display: map_get($font-variants, 'display');
                    }

                    @include include-font-face(
                        $font-family,
                        $file-path,
                        $font-weigh,
                        $font-style,
                        $font-formats,
                        $font-display,
                        $font-unicode-range
                    );
                }

                @if (type-of($font-variants) == 'list') {
                    @each $font-variant in $font-variants {
                        $file-path: map_get($font-variant, 'path');
                        $font-display: swap;
                        $font-unicode-range: null;

                        // Sections 'variants' and 'style' not required.
                        // Update only if They are defined in iterate  section.
                        @if (map_has_key($font-variant, 'weight')) {
                            $font-weigh: map_get($font-variant, 'weight');
                        }

                        @if (map_has_key($font-variant, 'style')) {
                            $font-style: map_get($font-variant, 'style');
                        }

                        @if (map_has_key($font-variant, 'unicode-range')) {
                            $font-unicode-range: map_get($font-variant, 'unicode-range');
                        }

                        @if (map_has_key($font-variant, 'display')) {
                            $font-display: map_get($font-variant, 'display');
                        }

                        @include include-font-face(
                            $font-family,
                            $file-path,
                            $font-weigh,
                            $font-style,
                            $font-formats,
                            $font-display,
                            $font-unicode-range
                        );
                    }
                }
            } @else {
                @warn 'Section "variants" should be of a "map" or "list" type.';
            }
        }
    }
}
