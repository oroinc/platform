{% macro collection_prototype(widget) %}
    {% if 'prototype' in widget.vars|keys %}
        {% set form = widget.vars.prototype %}
        {% set name = widget.vars.prototype.vars.name %}
    {% else %}
        {% set form = widget %}
        {% set name = widget.vars.full_name %}
    {% endif %}

    <div data-content="{{ name }}">
        <div class="row-oro oro-multiselect-holder">
            <div class="float-holder ">
                {% if form.children|length  %}
                    {% for child in form %}
                        {{ form_widget(child) }}
                        {{ form_errors(child) }}
                    {% endfor %}
                {% else %}
                    {{ form_widget(form) }}
                {% endif %}
                {{ form_errors(form) }}
                {{ form_rest(form) }}
            </div>
            {% if widget.parent.vars.allow_delete is not defined or widget.parent.vars.allow_delete -%}
                <button class="removeRow btn btn-icon btn-square-light" type="button" data-related="{{ name }}"><span class="fa-close"></span></button>
            {%- endif %}
        </div>
    </div>
{% endmacro %}

{% macro tooltip(tooltip_raw, tooltip_parameters, tooltip_placement, details_enabled, details_link, details_anchor, tooltip_translatable, tooltip_type) %}
    {%- set tooltip = tooltip_raw -%}
    {%- if tooltip_translatable is not same as(false) -%}
        {%- set tooltip = tooltip_raw|trans(tooltip_parameters|default({})) -%}
    {%- endif -%}
    {%- if tooltip is not empty -%}
        {%- set details_anchor = details_anchor|default(null) -%}
        {%- set details_link = details_link|default(null) -%}
        {%- set details_enabled = details_enabled|default(false) -%}
        {%- set tooltip_placement = isMobileVersion() ? 'top' : tooltip_placement|default(null) -%}
        {%- if details_enabled or details_anchor or details_link -%}
            {%- set helpLink = details_link|default(get_help_link()) -%}
            {%- if details_anchor -%}
                {%- set helpLink = helpLink ~ '#' ~ details_anchor -%}
            {%- endif -%}
            {%- set tooltip = tooltip
                ~ '<div class="clearfix"><div class="pull-right"><a href="' ~ helpLink ~ '">'
                ~ 'oro.form.tooltip.read_more'|trans ~ '</a></div></div>'
            -%}
        {%- endif -%}
        {%- set tooltip = '<div class="oro-popover-content">' ~ tooltip ~ '</div>' -%}
        {%- if tooltip_type is defined and tooltip_type -%}
            <i class="fa-{{ tooltip_type }} tooltip-icon tooltip-icon--{{ tooltip_type }}"
        {%- else -%}
            <i class="fa-info-circle tooltip-icon"
        {%- endif -%}
        {%- if tooltip_placement %} data-placement="{{ tooltip_placement }}"{% endif %} data-content="{{ tooltip }}" data-toggle="popover"></i>
    {%- endif -%}
{% endmacro %}

{#
    Render attribute row
    Parameters:
        title - attribute title
        value - attribute value
        additionalData - array with additional data
#}
{% macro attibuteRow(title, value, additionalData) %}
    {% import _self as UIMacro %}

    {% set attributeValue %}
        <div class="clearfix-oro">
            {% if value.value is not defined  %}
                <div class="control-label">{{ value }}</div>
            {% else %}
                <div class="control-label">{{ value.value }} <strong>{{ value.hint }}</strong></div>
            {% endif %}
        </div>
        {% if additionalData|length %}
            {% for data in additionalData.data %}
                <div class="clearfix-oro">
                    <div class="control-label">{{ attribute(data, additionalData.field) }}</div>
                </div>
            {% endfor %}
        {% endif %}
    {% endset %}
    {{ UIMacro.renderAttribute(title, attributeValue) }}
{% endmacro %}

{#
    Render attribute row with custom data block
    Parameters:
        title - row title
        data - row data
        options - addtional options for attribute
#}
{% macro renderAttribute(title, data, options) %}
    {% set options = {
        rootClass: null,
        termClass: null,
        descriptionClass: null,
        tooltipHTML: null,
        dir: null
    }|merge(options|default({})) %}

    <div class="attribute-item{% if options.rootClass %} {{ options.rootClass }}{% endif %}">
        <label class="attribute-item__term{% if options.termClass %} {{ options.termClass }}{% endif %}">{% if options.tooltipHTML %}{{ options.tooltipHTML|raw }} {% endif %}{{ title }}</label>
        <div class="attribute-item__description{% if options.descriptionClass %} {{ options.descriptionClass }}{% endif %}"
            {% if options.dir %}dir="{{ options.dir }}" {% endif %}
        >
            {{ data|raw }}
        </div>
    </div>
{% endmacro %}

{#
    Render attribute row with custom data block
    Parameters:
        title - row title
        data - row data
#}
{% macro renderControlGroup(title, data, options) %}
    {% set options = {
        rootClass: 'attribute-row'
    }|merge(options|default({})) %}
    <div class="control-group{% if options.rootClass %} {{ options.rootClass }}{% endif %}">
        <label class="control-label">{{ title }}</label>
        <div class="controls">
            {{ data|raw }}
        </div>
    </div>
{% endmacro %}

{#
    Render property block
    Parameters:
        title - property title
        data  - property data
        entity - the entitty instance on wich Field ACL should be checked
        fieldName - the name of field on wich Field ACL should be checked
        options - addtional options for property
#}
{% macro renderProperty(title, data, entity = null, fieldName = null, options = {}) %}
    {% import _self as UIMacro %}

    {{ UIMacro.renderHtmlProperty(title, data|escape, entity, fieldName, options) }}
{% endmacro %}

{#
    Render html property block
    Parameters:
        title - property title
        data  - property data
        entity - the entitty instance on wich Field ACL should be checked
        fieldName - the name of field on wich Field ACL should be checked
        options - addtional options for property
#}
{% macro renderHtmlProperty(title, data, entity = null, fieldName = null, options = {}) %}
    {% import _self as UIMacro %}

    {% if entity is defined and fieldName is defined and not is_granted('VIEW', entity, fieldName) %}
    {% else %}
        {{ UIMacro.renderAttribute(title, '<div class="control-label">' ~ data|default('oro.ui.empty'|trans) ~ '</div>', options) }}
    {% endif %}
{% endmacro %}

{#
    Render property block
    Parameters:
        title - property title
        data  - property data
        entity - the entitty instance on wich Field ACL should be checked
        fieldName - the name of field on wich Field ACL should be checked
#}
{% macro renderPropertyControlGroup(title, data, entity = null, fieldName = null) %}
    {% import _self as UIMacro %}

    {{ UIMacro.renderHtmlPropertyControlGroup(title, data|escape, entity, fieldName) }}
{% endmacro %}

{#
    Render html property block
    Parameters:
        title - property title
        data  - property data
        entity - the entitty instance on wich Field ACL should be checked
        fieldName - the name of field on wich Field ACL should be checked
#}
{% macro renderHtmlPropertyControlGroup(title, data, entity = null, fieldName = null) %}
    {% import _self as UIMacro %}

    {% if entity is defined and fieldName is defined and not is_granted('VIEW', entity, fieldName) %}
    {% else %}
        {{ UIMacro.renderControlGroup(title, '<div class="control-label">' ~ data|default('oro.ui.empty'|trans) ~ '</div>') }}
    {% endif %}
{% endmacro %}

{#
    Render collapsible html property block
    Parameters:
        title - property title
        data  - property data
        entity - the entitty instance on wich Field ACL should be checked
        fieldName - the name of field on wich Field ACL should be checked
#}
{% macro renderCollapsibleHtmlProperty(title, data, entity, fieldName, moreText = 'Show more', lessText = 'Show less') %}
    {% if is_granted('VIEW', entity, fieldName) %}
        {% set collapseId = 'collapse-'|uniqid %}
        {% set collapseKey = 'collapseBlock[' ~ oro_class_name(entity) ~ '][' ~ title ~ '][' ~ entity.id ~ ']' %}
        <div class="collapse-block">
            {% import _self as UIMacro %}

            {% set propertyHtml %}
                <div class="control-label collapse-overflow collapse no-transition" data-toggle="false" data-check-overflow="true"
                      id="{{ collapseId }}" data-state-id="{{ collapseKey }}" data-collapsed-text="{{ moreText|trans }}" data-expanded-text="{{ lessText|trans }}">
                    {{ data|default('oro.ui.empty'|trans) }}
                </div>
                <a href="#" role="button" class="control-label collapse-toggle" data-toggle="collapse" data-target="#{{ collapseId }}" aria-expanded="false" aria-controls="{{ collapseId }}">
                    <span data-text>{{ moreText|trans }}</span>
                </a>
            {% endset %}

            {{ UIMacro.renderAttribute(title, propertyHtml) }}
        </div>
    {% endif %}
{% endmacro %}

{#
    Render collapsible html block
    Parameters:
        data  - rendered data
        entity - the entity instance on wich Field ACL should be checked
        fieldName - the name of field on wich Field ACL should be checked
#}
{% macro renderCollapsibleHtml(data, entity = null, fieldName = null, moreText = 'Show more', lessText = 'Show less') %}
    {% if data is not empty and (entity is empty or fieldName is empty or is_granted('VIEW', entity, fieldName)) %}
        <div class="collapse-block">
            {% set collapseId = 'collapse-'|uniqid %}
            <div id="{{ collapseId }}" class="control-label collapse-overflow collapse no-transition"
                 data-collapsed-text="{{ moreText|trans }}"
                 data-expanded-text="{{ lessText|trans }}"
                 data-check-overflow="true"
                 data-toggle="false"
            {% if entity is not empty and fieldName is not empty %}
                 data-state-id="{{ 'collapseBlock[' ~ oro_class_name(entity) ~ '][' ~ fieldName ~ '][' ~ entity.id|default(0) ~ ']'}}"
            {% endif %}
            >{{ data|raw }}</div>
            <a href="#"
               role="button"
               class="control-label collapse-toggle"
               data-toggle="collapse"
               data-target="{{ '#' ~ collapseId }}"
               aria-expanded="false"
               aria-controls="{{ collapseId }}"
            ><span data-text>{{ moreText|trans }}</span></a>
        </div>
    {% endif %}
{% endmacro %}

{#
    Render html property block. HTML rendering may be switched off with system config.
    Parameters:
        title - property title
        data  - property data
#}
{% macro renderSwitchableHtmlProperty(title, data) %}
    {% import _self as UIMacro %}

    {% if oro_config_value('oro_form.wysiwyg_enabled') %}
        {% set data = data|oro_html_sanitize %}
    {%  else %}
        {% set data = data|striptags|nl2br %}
    {% endif %}

    {{ UIMacro.renderAttribute(title, '<div class="control-label html-property">' ~ data|default('oro.ui.empty'|trans) ~ '</div>') }}
{% endmacro %}

{#
    Render color property block
    Parameters:
        title - property title
        data  - property data
        empty - a value which should be used if data is empty
#}
{% macro renderColorProperty(title, data, empty) %}
    {% import _self as UIMacro %}

    {% if data is not none %}
       {% set data = '<i class="color hide-text" title="' ~ data ~ '" style="background-color: ' ~ data ~ ';">' ~ data ~ '</i>' %}
    {% endif %}
    {{ UIMacro.renderAttribute(title, '<div class="control-label">' ~ data|default(empty)|default('oro.ui.empty'|trans) ~ '</div>') }}
{% endmacro %}

{#
    Create the link
    Parameters - array:
        [
            'path'  - button url
            'class' - default class
            'aCss'  - additional button class
            'title' - button title
            'iCss'  - css class for 'i' tag (icon)
            'label' - button label
            'role'  - link role HTML attribute
            'target' - target attribute
        ]
#}
{% macro link(parameters) %}
    {# need to remove spaces just before label #}
    {% set iconHtml = '' %}
    {% if parameters.iCss is defined and parameters.iCss %}
        {% set iconHtml %}
        <span class="{{ parameters.iCss }}" aria-hidden="true">
            {% if not parameters.noIconText|default(false)%}
                <span class="sr-only">{{ parameters.label }}</span>
            {% endif %}
        </span>
        {% endset %}
    {% else %}
    {% endif %}
    {% apply spaceless %}
    <a href="{{ parameters.path }}"
        {% if (parameters.id is defined) %}
            id="{{ parameters.id }}"
        {% endif %}
        {% if parameters.data is defined %}
            {% for dataItemName,dataItemValue in parameters.data %}
                data-{{ dataItemName }}="{{ dataItemValue|e('html_attr')|raw }}"
            {% endfor %}
        {% endif %}
        {% set classes = '' %}
        {% if parameters.class is defined %}
            {% set classes = classes ~ ' ' ~ parameters.class|trim %}
        {% endif %}
        {% if parameters.aCss is defined %}
            {% set classes = classes ~ ' ' ~ parameters.aCss|trim %}
        {% endif %}
        {% if classes|length %}
            class="{{ classes|split(' ')|array_unique|join(' ') }}"
        {% endif %}
        {% if parameters.role is defined %}role="{{ parameters.role }}"{% endif %}
        {% if parameters.target is defined%}target="{{ parameters.target }}"{% endif %}
        {% if parameters.title is defined and parameters.title is not empty %}title="{{ parameters.title }}"{% endif %}>{{ iconHtml|trim|raw }}
        {{- parameters.label|trim }}
    </a>
    {% endapply %}
{% endmacro %}

{#
    Create the button
    Parameters - array:
        [
            'path'  - button url
            'aCss'  - additional button class
            'title' - button title
            'iCss'  - css class for 'i' tag (icon)
            'label' - button label
        ]
#}
{% macro button(parameters) %}
    {% import _self as UIMacro %}

    <div class="pull-left btn-group icons-holder">
        {{ UIMacro.link(parameters|merge({'class': 'btn back icons-holder-text', 'role': 'button'})) }}
    </div>
{% endmacro %}

{#
    Create dropdown button
    Parameters - array:
        [
            'label' - button label
            'elements' - dropdown elements
            'html' - html from placeholder
            'aCss'  - additional drop down class
        ]
#}
{% macro dropdownButton(parameters) %}
    {% import _self as UIMacro %}

    {% set togglerId = 'dropdown-'|uniqid %}
    <div class="btn-group">
        <a href="#" role="button" id="{{ togglerId }}" class="btn dropdown-toggle {{ parameters.bCss is defined? parameters.bCss : '' }}" data-toggle="dropdown"
           aria-haspopup="true" aria-expanded="false" data-placement="{{ parameters.placement is defined ? parameters.placement : 'bottom-end' }}"
           data-inherit-parent-width="loosely"
        >
            {% if parameters.iCss is defined %}
                <span class="{{ parameters.iCss }}" aria-hidden="true"></span>
            {% endif %}
            {{ parameters.label }}
        </a>
        <ul class="dropdown-menu {{ parameters.aCss is defined? parameters.aCss : '' }}" role="menu" aria-labelledby="{{ togglerId }}">
            {% if parameters.elements is defined and parameters.elements is not empty %}
                {% for item in parameters.elements %}
                    {{ UIMacro.dropdownItem(item) }}
                {% endfor %}
            {% endif %}
            {% if parameters.html is defined and parameters.html is not empty %}
                {{ parameters.html|raw }}
            {% endif %}
        </ul>
    </div>
{% endmacro %}

{#
    Create the dropdown button item
    Parameters - array:
        [
            'path'  - button url
            'aCss'  - additional button class
            'title' - button title
            'iCss'  - css class for 'i' tag (icon)
            'label' - button label
        ]
#}
{% macro dropdownItem(parameters) %}
    {% import _self as UIMacro %}
    <li>{{ UIMacro.link(parameters) }}</li>
{% endmacro %}

{#
    Create the dropdown button wich preserves last used button
    Parameters - array:
        [
            'html'     - original buttons markup
            'groupKey' - key, to remember last used button
            'options'  - options for pinnedDropdownButtonProcessor widget
        ]
#}
{% macro pinnedDropdownButton(parameters) %}
    {% import _self as UIMacro %}

    {% if isDesktopVersion() or parameters.mobileEnabled|default(false) %}
        {% set options = parameters.options|default({}) %}
        {% set rootClassName = parameters.rootClassName|default('pull-right pinned-dropdown') %}
        {# formId - 'id 'attribute of form that dropdown associate with #}
        {% set formId = parameters.formId is defined ? parameters.formId : null %}
        {% set options = options|merge({
            widgetModule: options.widgetModule|default('oroui/js/content-processor/pinned-dropdown-button'),
            widgetName: options.widgetName|default('pinnedDropdownButtonProcessor'),
            groupKey: parameters.groupKey is defined ? parameters.groupKey : '',
            useMainButtonsClone: true
        }) %}
        {% apply spaceless %}
            <div class="{{ rootClassName }}"
                 {% if formId is not null %}data-form="{{ formId }}"{% endif %}
                 {{ UIMacro.renderAttributes(parameters.dataAttributes|default({})|merge({
                     'page-component-module': 'oroui/js/app/components/jquery-widget-component',
                     'page-component-options': options
                 })) }}>
                {{ parameters.html|raw }}
            </div>
        {% endapply %}
    {% else %}
        {{ parameters.html|raw }}
    {% endif %}
{% endmacro %}

{#
    Predefined pinnedDropdownButton's settings for save button
#}
{% macro dropdownSaveButton(parameters) %}
    {% import _self as UIMacro %}
    {% set parameters = {
        'groupKey': 'saveButtons',
        'options': {
            'moreButtonAttrs': {
                'class': 'btn-primary'
            }
        }
    }|merge(parameters|default({})) %}
    {{ UIMacro.pinnedDropdownButton(parameters) }}
{% endmacro %}

{#
    Create 'Cancel' button
    Parameters
        'path' - button url
        'label' - button label | 'Cancel' by default
#}
{% macro cancelButton(path, label) %}
    {% import _self as UIMacro %}

    {% if label is empty %}
        {% set label = 'Cancel'|trans %}
    {% endif %}
    {{ UIMacro.button({'path' : path, 'title' : label, 'label' : label, data: {action: 'cancel'} }) }}
{% endmacro %}

{#
    Create 'Edit' button
    Parameters - array:
        [
            'path'  - button url
            'aCss'  - additional button class
            'title' - button title | 'Edit' by default
            'label' - button label | 'Edit' by default
            'entity_label' - if specified will be added for title and label
        ]
#}
{% macro editButton(parameters) %}
    {% import _self as UIMacro %}

    {% set iCss = ['fa-pencil-square-o'] %}
    {% set aCss = ['edit-button', 'main-group'] %}
    {% if parameters.iCss is defined %}
        {% set iCss = parameters.iCss|split(' ')|merge(iCss) %}
    {% endif %}
    {% if parameters.aCss is defined %}
        {% set aCss = parameters.aCss|split(' ')|merge(aCss) %}
    {% endif %}
    {% if parameters.title is defined %}
        {% set title = parameters.title %}
    {% else %}
        {% set title = parameters.entity_label is defined
            ? 'oro.ui.edit_entity'|trans({'%entityName%': parameters.entity_label})
            : 'oro.ui.edit'|trans
        %}
    {% endif %}
    {% set label = parameters.label is defined
        ? parameters.label
        : 'oro.ui.edit'|trans
    %}
    {% set parameters = parameters|merge({
        'iCss': iCss|join(' '),
        'aCss': aCss|join(' '),
        'title': title,
        'label': label
    }) %}

    {# Add URL parameters to button path #}
    {% set parameters = parameters|merge({ 'path' : oro_url_add_query(parameters['path']) }) %}

    {{ UIMacro.button(parameters) }}
{% endmacro %}

{#
    Create 'add' button
    Parameters - array:
        [
            'path'  - button url
            'aCss'  - additional button class
            'title' - button title | 'Create' by default
            'label' - button label | 'Create' by default
            'entity_label' - if specified will be added for title and label
        ]
#}
{% macro addButton(parameters) %}
    {% if parameters.label is defined %}
        {% set label = parameters.label %}
    {% else %}
        {% set label = parameters.entity_label is defined
            ? 'oro.ui.create_entity'|trans({'%entityName%': parameters.entity_label})
            : 'oro.ui.create'|trans
        %}
    {% endif %}
    {% if parameters.title is defined %}
        {% set title = parameters.title %}
    {% else %}
        {% set title = parameters.entity_label is defined
            ? 'oro.ui.create_entity'|trans({'%entityName%': parameters.entity_label})
            : 'oro.ui.create'|trans
        %}
    {% endif %}

    {% import _self as UIMacro %}
    {{ UIMacro.link({'class': parameters.class|default('btn main-group btn-primary pull-right'), 'role': 'button', 'label': label, 'title': title}|merge(parameters)) }}
{% endmacro %}

{#
    Delete button with javascript handler
    Parameters - array:
        [
            'aCss' - additional css class for 'a' tag
            'dataId' - data-id parameter
            'dataMessage' - message before delete record | 'Are you sure you want to delete this %entity_label%?' by default
            'dataRedirect' - url to redirect after delete | '%entity_label% deleted' by default
            'dataUrl' - data-url parameter
            'title' - button title | 'Delete' by default
            'label' - button label | 'Delete' by default
            'entity_label' - if specified will be added for title, label and messages| 'item' by default
            'disabled' - if true this control is rendered as disabled
        ]
#}
{% macro deleteButton(parameters) %}
    {% import _self as UIMacro %}

    {% set aCss = 'btn icons-holder-text' %}

    {% if parameters.disabled is defined and parameters.disabled %}
        {% set aCss = aCss ~ ' disabled' %}
    {% endif %}

    {% if parameters.aCss is defined %}
        {% set aCss = aCss ~ ' ' ~ parameters.aCss %}
    {% endif %}

    {% set parameters = parameters|merge({'aCss': aCss}) %}

    <div class="pull-left btn-group icons-holder">
        {{ UIMacro.deleteLink(parameters) }}
    </div>
{% endmacro %}

{% macro deleteLink(parameters) %}
    {% import _self as UIMacro %}

    {% set entityLabel = parameters.entity_label is defined ? parameters.entity_label : 'oro.ui.item'|trans %}
    {% set label = parameters.label is defined ? parameters.label : 'oro.ui.delete'|trans %}
    {% if parameters.title is defined %}
        {% set title = parameters.title %}
    {% else %}
        {% set title = parameters.entity_label is defined
            ? 'oro.ui.delete_entity'|trans({'%entityName%': parameters.entity_label})
            : 'oro.ui.delete'|trans
        %}
    {% endif %}

    {% set message = parameters.dataMessage is defined ? parameters.dataMessage : 'oro.ui.delete_confirm'|trans({ '%entity_label%' : entityLabel }) %}
    {% set successMessage = parameters.successMessage is defined ? parameters.successMessage : 'oro.ui.delete_message'|trans({ '%entity_label%' : entityLabel }) %}
    {% set url = parameters.dataUrl is defined ? parameters.dataUrl : '' %}
    {% set linkParams = {
        'data': {
            'message': message,
            'success-message': successMessage,
            'url': url
        },
        'iCss': parameters.iCss is defined ? parameters.iCss: 'fa-trash-o',
        'aCss': parameters.aCss,
        'title': title,
        'label': label,
        'path': '#'
    } %}

    {% if (parameters.dataId is defined) %}
        {% set data = linkParams.data|merge({'id': parameters.dataId}) %}
        {% set linkParams = linkParams|merge({ 'data': data }) %}
    {% endif %}
    {% if parameters.dataRedirect is defined %}
        {% set data = linkParams.data|merge({'redirect': parameters.dataRedirect}) %}
        {% set linkParams = linkParams|merge({ 'data': data }) %}
    {% endif %}
    {% if parameters.data is defined %}
        {% for dataItemName,dataItemValue in parameters.data %}
            {% set data = linkParams.data|merge({(dataItemName): dataItemValue}) %}
            {% set linkParams = linkParams|merge({ 'data': data }) %}
        {% endfor %}
    {% endif %}
    {{ UIMacro.link(linkParams) }}
{% endmacro %}

{#
    A link with a Javascript handler

    Parameters - array:
        [
            'class' - default class
            'aCss' - additional css class for 'a' tag
            'iCss' - additional css class for 'i' tag
            'dataId' - data-id parameter
            'dataUrl' - data-url parameter
            'dataRedirect' - url to redirect to after the operation is finished
            'successMessage' - message to display after the operation is finished
            'title' - button title
            'ariaLabel' - button aria-label
            'label' - button label
            'labelInIcon' - defines whether the label is included in the icon (true by default)
            'visible' - defines whether the button is visible (true by default)
            'dataAttributes' - additional data attributes
        ]
#}
{% macro clientLink(parameters) %}
    {% import _self as UIMacro %}
    {% set parameters = parameters|merge({
        class: parameters.class|default('') ~ (parameters.aCss is defined ? ' ' ~ parameters.aCss : '')
    })%}
    {% apply spaceless %}
        <a href="#"
            {%- if (parameters.dataUrlRaw is defined) -%}
                data-url="{{ parameters.dataUrlRaw|raw }}"
            {% elseif (parameters.dataUrl is defined) %}
                data-url="{{ parameters.dataUrl }}"
            {%- endif -%}
            {{- UIMacro.clientControlAttrs(parameters) -}}>
            {{- UIMacro.clientControlIcon(parameters) -}}
            {% set renderLinkLabel %}
                {{- parameters.label is defined ? parameters.label : '' -}}
            {% endset %}
            {% if parameters.labelClass is defined %}
                <span class="{{ parameters.labelClass }}">{{ renderLinkLabel }}</span>
            {% else %}
                {{ renderLinkLabel }}
            {% endif %}
        </a>
    {% endapply %}
{% endmacro %}

{#
    Attributes for a control with a Javascript handler

    Parameters - array:
        [
            'class' - default class
            'id' - HTML attribute id
            'dataId' - HTML attribute data-id
            'successMessage' - message to display after the operation is finished
            'dataRedirect' - url to redirect to after the operation is finished
            'role' - HTML attribute role
            'ariaSelected' - HTML attribute aria-selected
            'ariaControls' - HTML attribute aria-controls
            'ariaLabel' - HTML attribute aria-label
            'visible' - defines whether the label is included in the icon (true by default)
            'widget' - options to define a widget on the control
            'pageComponent' - options to define a page-component on the control
            'dataAttributes' - additional HTML data attributes
        ]
#}
{% macro clientControlAttrs(parameters) %}
    {% import _self as UIMacro %}
    {% if (parameters.class is defined) %}
        class="{{ parameters.class|split(' ')|array_unique|join(' ') }}"
    {% endif %}
    {% if (parameters.id is defined) %}
        id="{{ parameters.id }}"
    {% endif %}
    {% if (parameters.title is defined) %}
        title="{{ parameters.title }}"
    {% endif %}
    {% if (parameters.dataId is defined) %}
        data-id="{{ parameters.dataId }}"
    {% endif %}
    {% if (parameters.dataIntention is defined) %}
        data-intention="{{ parameters.dataIntention }}"
    {% endif %}
    {% if (parameters.successMessage is defined) %}
        data-success-message="{{ parameters.successMessage }}"
    {% endif %}
    {% if parameters.dataRedirect is defined %}
        data-redirect="{{ parameters.dataRedirect }}"
    {% endif %}
    {% if parameters.role is defined %}
        role="{{ parameters.role }}"
    {% endif %}
    {% if parameters.dir is defined %}
        dir="{{ parameters.dir }}"
    {% endif %}
    {% if parameters.ariaSelected is defined %}
        aria-selected="{{ parameters.ariaSelected }}"
    {% endif %}
    {% if parameters.ariaControls is defined %}
        aria-controls="{{ parameters.ariaControls }}"
    {% endif %}
    {% if (parameters.ariaLabel is defined) %}
        aria-label="{{ parameters.ariaLabel }}"
    {% endif %}
    {% if (parameters.ariaHaspopup is defined) %}
        aria-haspopup="{{ parameters.ariaHaspopup ? 'true' : 'false' }}"
    {% endif %}
    {% if (parameters.visible is defined and not parameters.visible) %}
        style="display: none"
    {% endif %}
    {% if parameters.widget is defined and parameters.widget|length %}
        {% set options = parameters.widget %}
        {%- if (options.createOnEvent is not defined) -%}
            {% set options = options|merge({
                'createOnEvent' : options.event|default('click')
            }) %}
        {%- endif -%}
        {{ UIMacro.renderWidgetAttributes(options) }}
    {% endif %}
    {%- if parameters.pageComponent is defined -%}
        {{ UIMacro.renderPageComponentAttributes(parameters.pageComponent) }}
    {%- endif -%}
    {%- if parameters.dataAttributes is defined and parameters.dataAttributes|length -%}
        {{ UIMacro.renderAttributes(parameters.dataAttributes) }}
    {%- endif -%}
{% endmacro %}

{#
    An icon for a link/button control with a Javascript handler

    Parameters - array:
        [
            'iCss' - additional css class for 'span' tag
            'label' - control label
            'labelInIcon' - defines whether the label is included in the icon (true by default)
        ]
#}
{% macro clientControlIcon(parameters) %}
    {% import _self as UIMacro %}
    {% apply spaceless %}
    {%- set labelInIcon = parameters.labelInIcon is defined ? parameters.labelInIcon : true -%}
    {%- if (parameters.iCss is defined) -%}
        <span class="{{ parameters.iCss }}" aria-hidden="true">
            {%- if (parameters.label is defined and labelInIcon) -%}
                <span class="sr-only">{{- parameters.label -}}</span>
            {%- endif -%}
        </span>
    {%- endif -%}
    {% endapply %}
{% endmacro %}

{#
    A button with a Javascript handler

    Parameters - array:
        [
            'class' - default class
            'btnCss' - additional css class for 'button' tag
            'iCss' - additional css class for 'span' tag
            'ariaLabel' - aria-label text for button
            'dataId' - data-id parameter
            'dataRedirect' - url to redirect to after the operation is finished
            'successMessage' - message to display after the operation is finished
            'label' - button label
            'labelInIcon' - defines whether the label is included in the icon (true by default)
            'visible' - defines whether the button is visible (true by default)
            'dataAttributes' - additional HTML data attributes
        ]
#}
{% macro clientBtn(parameters) %}
    {% import _self as UIMacro %}
    {% set parameters = parameters|merge({
        class: parameters.class|default('') ~ ' ' ~ parameters.btnCss|default('btn')
    })%}
    {% set type = parameters.type is defined ? parameters.type : 'button' %}
    {% apply spaceless %}
        <button {{- UIMacro.clientControlAttrs(parameters) -}}
            type="{{ type }}"
        {% if (parameters.title is defined) %}
            title="{{ parameters.title }}"
        {% endif %}
        {% if (parameters.form is defined) %}
            form="{{ parameters.form }}"
        {% endif %}
        {%- if (parameters.dataUrlRaw is defined) -%}
            data-url="{{ parameters.dataUrlRaw|raw }}"
        {% elseif (parameters.dataUrl is defined) %}
            data-url="{{ parameters.dataUrl }}"
        {%- endif -%}
        >
            {{- UIMacro.clientControlIcon(parameters) -}}
            {% set renderLinkLabel %}
                {{- parameters.label is defined ? parameters.label : '' -}}
            {% endset %}
            {% if parameters.labelClass is defined %}
                <span class="{{ parameters.labelClass }}">{{ renderLinkLabel }}</span>
            {% else %}
                {{ renderLinkLabel }}
            {% endif %}
        </button>
    {% endapply %}
{% endmacro %}

{#
    Renders page component attributes passed in array
#}
{% macro renderPageComponentAttributes(pageComponent) %}
    {% for key,value in pageComponent %}
        {% if key == 'layout' %}
            data-layout="{{ pageComponent.layout }}"
        {% elseif value is iterable %}
            data-page-component-{{ key }}="{{ value|json_encode }}"
        {% else %}
            data-page-component-{{ key }}="{{ value }}"
        {% endif %}
    {% endfor %}
{% endmacro %}

{#
    Renders attributes for widget

    Parameters: options array for widget
#}
{% macro renderWidgetAttributes(options) %}
    {% import _self as UIMacro %}

    {% set pageComponent = {
        module:  "oroui/js/app/components/widget-component",
        options: options
    }  %}
    {% if options.options.pageComponentName is defined %}
        {% set pageComponent = pageComponent|merge({name: options.options.pageComponentName}) %}
    {% endif %}
    {{ UIMacro.renderPageComponentAttributes(pageComponent) }}
{% endmacro %}

{% macro renderAttributes(options, prefix) %}
    {% for name, value in options %}
        {% if (value is iterable) %}
            {% set value = value|json_encode(constant('JSON_FORCE_OBJECT')) %}
        {% endif %}
        data-{% if prefix is not empty %}{{ prefix }}-{% endif %}{{ name }}="{{ value }}"
    {% endfor %}
{% endmacro %}

{#
    A button with javascript handler
    Parameters - array:
        [
            'class' - default class
            'aCss' - additional css class for 'a' tag
            'iCss' - additional css class for 'i' tag
            'dataId' - data-id parameter
            'dataUrl' - data-url parameter
            'dataRedirect' - url to redirect after an operation finished
            'successMessage' - a message which will be shown after an operation finished
            'title' - button title
            'label' - button label
            'visible' - determined whether the button is visible or not. Defaults to true
        ]
#}
{% macro clientButton(parameters) %}
    {% import _self as UIMacro %}

    {#{% espaceless %}#}
        <div class="pull-left btn-group icons-holder">
            {{ UIMacro.clientLink(parameters|merge({class: 'btn icons-holder-text', role: 'button'})) }}
        </div>
    {#{% endapply %}#}
{% endmacro %}

{#
    A button that sends request to server
    Parameters - array:
        [
            'class' - default class
            'aCss' - additional css class for 'a' tag
            'iCss' - additional css class for 'i' tag
            'dataId' - data-id parameter
            'dataMethod' - request http method
            'dataUrl' - data-url parameter
            'dataRedirect' - url to redirect after an operation finished
            'successMessage' - a message which will be shown after an operation finished
            'errorMessage' - a message which will be shown if operation failed
            'title' - button title
            'label' - button label
            'visible' - determined whether the button is visible or not. Defaults to true
        ]
#}
{% macro ajaxButton(parameters) %}
    {% import _self as UIMacro %}

    <div class="pull-left btn-group icons-holder">
        {{ UIMacro.ajaxLink(parameters|merge({'class': 'btn icons-holder-text', role: 'button'})) }}
    </div>
{% endmacro %}

{#
    A link that sends request to server
    Parameters - array:
        [
            'class' - default class
            'aCss' - additional css class for 'a' tag
            'iCss' - additional css class for 'i' tag
            'dataId' - data-id parameter
            'dataMethod' - request http method
            'dataUrl' - data-url parameter
            'dataRedirect' - url to redirect after an operation finished
            'successMessage' - a message which will be shown after an operation finished
            'errorMessage' - a message which will be shown if operation failed
            'title' - button title
            'label' - button label
            'visible' - determined whether the link is visible or not. Defaults to true
        ]
#}
{% macro ajaxLink(parameters) %}
    {% import _self as UIMacro %}

    {% set additionalParameters = {
        'pageComponent': {
            'module': 'oroui/js/app/components/ajax-button'
        },
        'dataAttributes': {
            'method': parameters.dataMethod is defined ? parameters.dataMethod : 'GET',
            'error-message': parameters.errorMessage is defined ? parameters.errorMessage : 'oro.ui.unexpected_error'
        }
    } %}

    {{ UIMacro.clientLink(parameters|merge(additionalParameters)) }}
{% endmacro %}

{#
    A button with javascript handler
    Parameters - array:
        [
            'class' - default class
            'aCss' - additional css class for 'a' tag
            'iCss' - additional css class for 'i' tag
            'dataId' - data-id parameter
            'dataUrl' - data-url parameter
            'dataRedirect' - url to redirect after an operation finished
            'successMessage' - a message which will be shown after an operation finished
            'title' - button title
            'label' - button label
            'visible' - determined whether the button is visible or not. Defaults to true
        ]
#}
{% macro dropdownClientItem(parameters) %}
    {% import _self as UIMacro %}

    <li>{{ UIMacro.clientLink(parameters) }}</li>
{% endmacro %}

{#
    Outputs a button with "Save and Close" label. After save application will show a page configured by parameter with name "action".
    For parameters description see documentation of saveActionButton macros.
#}
{% macro saveAndCloseButton(parameters = {}) %}
    {% import _self as UIMacro %}

    {% set defaultParameters = {
        'class': 'btn-primary',
        'label': 'Save and Close'|trans,
        'action': 'save_and_close'
    } %}

    {% set parameters = defaultParameters|merge(parameters) %}

    {{ UIMacro.saveActionButton(parameters) }}
{% endmacro %}

{#
    Outputs a button with "Save and Stay" label. After save application will show a page configured by parameter with name "action".
    For parameters description see documentation of saveActionButton macros.
#}
{% macro saveAndStayButton(parameters = {}) %}
    {% import _self as UIMacro %}

    {% set defaultParameters = {
        'label': 'Save'|trans,
        'action': 'save_and_stay'
    } %}

    {% set parameters = defaultParameters|merge(parameters) %}

    {{ UIMacro.saveActionButton(parameters) }}
{% endmacro %}

{#
    Outputs a button with "Save and New" label. After save application will show a page configured by parameter with name "action".
    For parameters description see documentation of saveActionButton macros.
#}
{% macro saveAndNewButton(parameters) %}
    {% import _self as UIMacro %}

    {% set defaultParameters = {
        'label': 'Save and New'|trans
    } %}

    {% set parameters = defaultParameters|merge(parameters) %}

    {{ UIMacro.saveActionButton(parameters) }}
{% endmacro %}

{#
    Outputs a button with "Save and Return" label. After save application will show a page configured by parameter with name "action".
    For parameters description see documentation of saveActionButton macros.
#}
{% macro saveAndReturnButton(parameters = {}) %}
    {% import _self as UIMacro %}

    {% set defaultParameters = {
        'class': 'btn-primary',
        'label': 'Save and Return'|trans,
        'action': 'save_and_return'
    } %}

    {% set parameters = defaultParameters|merge(parameters) %}

    {{ UIMacro.saveActionButton(parameters) }}
{% endmacro %}

{#
    Outputs generic button with "Save" label and redirect behavior. Redirect is configured with parameter "route"
    and "route_params". Route params could contain paths instead of values if value will be available only after save.

    Parameters - array
        [
            'type' - button type, should be "button" or "submit"
            'class' - CSS class
            'label' - label of button
            'route' - Name of route to make a redirect.
            'params' - Optional list of route parameters. In case if value of parameter will be available only
                after save you can pass property path. For example: ['id': '$id']. '$' at the means property path.
                So when controller will handle save it will redirect to route using actual id value of entity.
            'action' - Contains data used by controller to make redirect. This value is prepared automatically
                based on route and route_params so you don't need to use this attribute directly if route parameter
                was set.
        ]
#}
{% macro saveActionButton(parameters) %}
    {% import _self as UIMacro %}

    {% set defaultParameters = {
        'type' : 'submit',
        'class': 'btn-primary main-group',
        'label': 'Save'|trans,
    } %}

    {% if parameters.route is defined %}
        {# Prepare action parameter based on route #}
        {% set action = {'route': parameters.route} %}
        {% if parameters.params is defined %}
            {% set action = action|merge({'params': parameters.params}) %}
        {% endif %}
        {% set parameters = parameters|merge({'action': action|json_encode}) %}
    {% endif %}

    {% set parameters = defaultParameters|merge(parameters) %}

    {{ UIMacro.buttonType(parameters) }}
{% endmacro %}

{#
    Button macros with custom button type
    Parameters - array:
        [
            'type' - button type
            'class' - additional button css classes
            'label' - label of button
        ]
#}
{% macro buttonType(parameters) %}
    {% set defaultParameters = {
        'type' : 'button'
    } %}
    {% set parameters = defaultParameters|merge(parameters) %}
    <div class="btn-group">
        <button type="{{ parameters.type }}" class="btn {% if (parameters.class is defined) %}{{ parameters.class }}{% endif %}{% if (parameters.action is defined) %} action-button{% endif %}"
                {% if (parameters.action is defined) %}data-action="{{ parameters.action }}"{% endif %}
                {% if parameters.data is defined %}
                    {% for dataItemName,dataItemValue in parameters.data %}
                        data-{{ dataItemName }}="{{ dataItemValue|e('html_attr')|raw }}"
                    {% endfor %}
                {% endif %}>
            {{ parameters.label }}
        </button>
    </div>
{% endmacro %}

{#
    Separator between buttons
#}
{% macro buttonSeparator() %}
    <div class="pull-left" aria-hidden="true">
        <div class="separator-btn"></div>
    </div>
{% endmacro %}

{#
    Create scroll sub block for scroll block
    Parameters:
        title - title of sub block
        data - array with data fields (i.e. form_row() or attibuteRow() data)
        isForm - flag what scroll block mut contain the form
        useSpan - flag to indicate is subblock must have css class specified in spanClass parameter or not
        spanClass - css class name of subblock, if this parameter is not specified the css class is span6
#}
{% macro scrollSubblock(title, data, isForm, useSpan, spanClass) %}
    {% set spanClass = spanClass|default('responsive-cell') %}
    {#% if useSpan is not defined or useSpan == true %}
        {% set span = spanClass %}
    {% else %}
        {% set span = '' %}
    {% endif %}
    {% if span %}
        <div class="{{ span }}">
    {% endif %#}
    <div class="{{ spanClass }} clearfix">
    {% if title|length %}<h5 class="user-fieldset"><span>{{ title }}</span></h5>{% endif %}
    {% for dataBlock in data %}
        {{ dataBlock|raw }}
    {% endfor %}
    </div>
    {#% if span %}
        </div>
    {% endif %#}
{% endmacro %}

{#
    Create scroll block for scroll data area
    Parameters:
        blockId - id of block
        title - block title
        'subblocks' - array with scroll sub blocks:
            [
                'title' - title of sub block
                'data' - array with data fields (i.e. form_row() or attibuteRow() data)
            ]
        isForm - flag what scroll block mut contain the form
        contentAttributes - additional attributes for block content
        useSubBlockDivider - indicates if 'row-fluid-divider' css class should be added to a row when there are more than one subblocks
        options
            [
                'initSectionInstantly' - boolean, if is true -- aditional attribute added to the section element,
                    in order to ignore delayed initialization
            ]
#}
{% macro scrollBlock(blockId, title, subblocks, isForm, contentAttributes, useSubBlockDivider, headerLinkContent = '', options = {}) %}
    {% import _self as UIMacro %}

    {% set cols = subblocks|length %}
    <div class="responsive-section"{% if options.initSectionInstantly is defined and options.initSectionInstantly %} data-init-section-instantly{% endif %}>
        {% if title is defined %}<h4 class="scrollspy-title">{{ title }}{% if headerLinkContent is defined %}{{ headerLinkContent }}{% endif %}</h4>{% endif %}
        <div id="{{ blockId }}" class="scrollspy-nav-target"></div>
        <div class="section-content">
            <div class="row-fluid{% if (contentAttributes is defined and contentAttributes.class is defined and contentAttributes.class|length) %} {{ contentAttributes.class }}{% endif %}{% if cols > 1 and (useSubBlockDivider is not defined or useSubBlockDivider == true) %} row-fluid-divider{% endif %}" {{ UIMacro.attributes(contentAttributes, ['class']) }}>
                {% if isForm is defined and isForm == true %}
                    <fieldset class="form-horizontal">
                {% else %}
                    <div class="form-horizontal">
                {% endif %}
                    {% for subblock in subblocks %}
                        {{ UIMacro.scrollSubblock(subblock.title is defined and subblock.title|length ? subblock.title : null, subblock.data, isForm, subblock.useSpan is defined ? subblock.useSpan : true, subblock.spanClass is defined ? subblock.spanClass : '') }}
                    {% endfor %}
                {% if isForm is defined and isForm == true %}
                    </fieldset>
                {% else %}
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
{% endmacro %}

{#
    Create scroll blocks (like in view or update pages)
    Parameters:
        dataTarget - id of scroll block
        data - array with scroll data blocks
        form
    data parameter structure:
        [
            'dataBlocks' - array of blocks. each block consist of:
                [
                    'title' - title of scroll block
                    'priority' - a number that can be used to change the order of blocks
                    'class' - additional css class for scroll block menu item
                    'useSubBlockDivider' - [optional] indicates if 'row-fluid-divider' css class should be added to a row when there are more than one subblocks
                    'subblocks' - array with scroll sub blocks:
                        [
                            'title' - title of sub block
                            'data' - array with data fields (i.e. form_row() or attibuteRow() data)
                        ]
                ]
            'formErrors' - errors from the form
            'hiddenData' - additional data (hidden fields from the form)
        ]
#}
{% macro scrollData(dataTarget, data, entity, form = null) %}
    {% import _self as UIMacro %}

    {% set data = oro_ui_scroll_data_before(dataTarget, data, entity, form) %}

    {% if form is defined and form %}
        {% set isForm = true %}
    {% else %}
        {% set isForm = false %}
    {% endif %}

    {% set dataBlocks = data.dataBlocks|oro_sort_by %}

    {% if not isMobileVersion() %}
        <div id="{{ dataTarget }}" class="navbar navbar-static scrollspy-nav">
            <nav class="nav">
                {% for navElement in dataBlocks %}
                    <a class="nav-link{% if loop.first %} active {% endif %}{{ navElement.class|default('') }}"
                       href="#scroll-{{ loop.index }}"
                    >{{ navElement.title }}</a>
                {% endfor %}
            </nav>
        </div>
    {% endif %}
    <div class="scrollspy-main-container clearfix">
        {% if data.formErrors is defined and data.formErrors | length%}
            <div class="customer-info-actions container-fluid well-small alert-wrap" role="alert">
                <div class="alert alert-error alert-dismissible">
                    <button class="close" type="button" data-dismiss="alert" data-target=".alert-wrap" aria-label="{{ 'Close'|trans }}">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    {{ data.formErrors|raw|nl2br }}
                </div>
            </div>
        {% endif %}
        <div data-spy="scroll" data-target="#{{ dataTarget }}" data-offset="1" class="scrollspy scrollable-container{% if isForm %} form-container{% endif %}">
            <div class="container-fluid">
            {% for scrollBlock in dataBlocks %}
                {{ UIMacro.scrollBlock(
                    "scroll-" ~ loop.index,
                    scrollBlock.title,
                    scrollBlock.subblocks,
                    isForm,
                    scrollBlock.content_attr is defined ? scrollBlock.content_attr : null,
                    scrollBlock.useSubBlockDivider is defined ? scrollBlock.useSubBlockDivider : true,
                    scrollBlock.headerLinkContent is defined ? scrollBlock.headerLinkContent : null,
                    scrollBlock.options is defined ? scrollBlock.options : {}
                ) }}
            {% endfor %}
            {% if data.hiddenData is defined or isForm %}
                <div class="hide" data-skip-input-widgets data-layout="separate">
                    {% if data.hiddenData is defined %}
                        {{ data.hiddenData|raw }}
                    {% endif %}
                    {% if isForm %}
                        {{ form_rest(form) }}
                    {% endif %}
                </div>
            {% endif %}
            </div>
        </div>
    </div>
{% endmacro %}

{#
    Render attributes of HTML element.
    Parameters:
        attr - attributes
        excludes - names of attributes which should not be rendered even if they exist in attr parameter
#}
{% macro attributes(attr, excludes) %}
    {% apply spaceless %}
        {% set attr = attr|default({}) %}
        {% for attrname, attrvalue in attr %}
            {% if not excludes is defined or not excludes[attrname] is defined %}
                {% if attrname in ['placeholder', 'title'] and translation_domain is defined %}
                    {{ attrname }}="{{ attrvalue|trans({}, translation_domain) }}"
                {% else %}
                    {{ attrname }}="{{ attrvalue is iterable ? attrvalue|json_encode : attrvalue }}"
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endapply %}
{% endmacro %}

{#
    Render link to entity owner
    Parameters:
        entity - entity record
        renderLabel - need render default label
#}
{%- macro entityOwnerLink(entity, renderLabel = true) -%}
    {% import _self as UIMacro %}

    {% apply spaceless %}
        {%- if entity %}
            {% set ownerType = oro_get_owner_type(entity) %}
            {%- if ownerType %}
                {% if  is_granted('VIEW', entity, oro_get_owner_field_name(entity)) %}
                    {% set owner = oro_get_entity_owner(entity) %}
                    {% if owner %}
                        {% if (ownerType == 'USER') %}
                            {% set ownerPath = path('oro_user_view', {'id': owner.id}) %}
                            {% set ownerName = owner|oro_format_name %}
                        {% elseif (ownerType == 'BUSINESS_UNIT') %}
                            {% set ownerPath = path('oro_business_unit_view', {'id': owner.id}) %}
                            {% set ownerName = owner.name %}
                        {% endif %}
                        {% if ownerName is defined %}
                            {% if renderLabel %}
                                {% set entityClassName = oro_class_name(entity) %}
                                {{ oro_field_config_value(
                                        entityClassName,
                                        oro_entity_config_value(entityClassName, 'owner_field_name', 'ownership'),
                                        'label'
                                    )|trans
                                }}:
                            {% endif %}
                            {% if ownerPath is defined and is_granted('VIEW', owner) %}
                                {{ UIMacro.renderUrl(ownerPath, ownerName) }}
                            {% else %}
                                {{ ownerName }}
                            {% endif %}
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endif -%}
        {% endif -%}
    {% endapply %}
{%- endmacro -%}

{%- macro renderUrl(url, text, class, title, attributes) -%}
    {% apply spaceless %}
        {% if text is empty %}
            {% set text = url %}
        {% endif %}
        {% if title is empty %}
            {% set title = text %}
        {% endif %}
        {% if class is empty %}
            {% set class = '' %}
        {% endif %}
        {% if url is not empty %}
            <a href="{{ url|escape('html_attr') }}" title="{{ title|escape('html_attr') }}" class="{{ class }}"
            {% if (not oro_is_url_local(url)) %} target="_blank"{% endif %}
            {% for name,value in attributes|default({}) %}
                {{ name }}="{{ value }}"
            {% endfor %}
            >{{ text }}</a>
        {% endif %}
    {% endapply %}
{%- endmacro -%}

{%- macro renderUrlWithActions(parameters, entity) -%}
    {% import _self as UIMacro %}

    {% set url = parameters.url|default %}
    {%- set actions %}
        {%- placeholder url_actions with {data: url, entity: entity} -%}
    {% endset -%}
    {% set actions = actions|trim %}
    <span class="inline-actions-element truncate{% if actions is empty %} inline-actions-element_no-actions{% endif %}">
        <span class="inline-actions-element_wrapper">
            {{ UIMacro.renderUrl(
                url,
                parameters.text|default,
                parameters.class|default,
                parameters.title|default,
                parameters.attributes|default
            ) }}
        </span>
        {% if actions is not empty -%}
            <span class="inline-actions-element_actions url-actions">{{ actions|raw }}</span>
        {%- endif %}
    </span>
{%- endmacro %}

{%- macro renderPhone(phone, title) -%}
    {% if title is empty %}
        {% set title = phone %}
    {% endif %}
    {% if phone is not empty %}
        <a href="tel:{{ phone|escape('html_attr') }}" title="{{ title|escape('html_attr') }}" class="phone nowrap"><bdo dir="ltr">{{ title }}</bdo></a>
    {% endif %}
{%- endmacro -%}

{#
    Render phone number with related actions block
    Parameters:
        phone - PhoneInterface object or string
        entity - related entity record
#}
{% macro renderPhoneWithActions(phone, entity) -%}
    {% import _self as UIMacro %}

    {% if phone is not empty %}
        {%- set actions %}
            {%- placeholder phone_actions with {phone: phone, entity: entity} -%}
        {% endset -%}
        {% set actions = actions|trim %}
        <span class="inline-actions-element{% if actions is empty %} inline-actions-element_no-actions{% endif %}">
            <span class="inline-actions-element_wrapper">{{ UIMacro.renderPhone(phone) }}</span>
            {% if actions is not empty -%}
                <span class="inline-actions-element_actions phone-actions">{{ actions|raw }}</span>
            {%- endif %}
        </span>
    {% endif %}
{%- endmacro %}

{% macro getApplicableForUnderscore(str) %}
    {{ str|replace({
        "<script": '<% print("<sc" + "ript"); %>',
        "</script": '<% print("</sc" + "ript"); %>',
        "<%": '<% print("<" + "%"); %>',
        "%>": '<% print("%" + ">"); %>',
    })|raw }}
{% endmacro %}

{%- macro renderList(elements) -%}
    <ul class="extra-list">
        {%- for element in elements %}
            <li class="extra-list-element">{{ element }}</li>
        {% endfor -%}
    </ul>
{% endmacro %}

{%- macro renderTable(titles, rows, style) -%}
     <table class="{{ style }}">
     <thead>
     <tr>
    {%- for title in titles %}
        <th>{{ title }}</th>
    {% endfor -%}
     </tr>
     </thead>
    {%- for row in rows %}
        <tr>
            {%- for element in row %}
                <td>{{ element }}</td>
            {% endfor -%}
        </tr>
    {% endfor -%}
    </table>
{% endmacro %}

{%- macro entityViewLink(entity, label, route, permission) -%}
    {% import _self as UIMacro %}

    {% if entity %}
        {% if route and is_granted(permission|default('VIEW'), entity) and feature_resource_enabled(route, 'routes') %}
            {{ UIMacro.renderUrl(path(route, {'id': entity.id}), label) }}
        {% else %}
            {{ label|escape }}
        {% endif %}
    {% else %}
        {{ 'oro.ui.empty'|trans }}
    {% endif %}
{%- endmacro -%}

{%- macro entityViewLinks(entities, labelProperty, route, permission) -%}
    {% import _self as UIMacro %}

    {% set links = [] %}
    {% for entity in entities %}
        {% set links = links|merge([UIMacro.entityViewLink(entity, attribute(entity, labelProperty), route, permission)]) %}
    {% endfor %}
    {{ UIMacro.renderList(links) }}
{%- endmacro -%}

{#
    Renders text that should be rendered instead of not accessible entity field
    Parameters:
        labelText - Text that should be rendered
#}
{%- macro renderDisabledLabel(labelText) -%}
    <i>{{ labelText }}</i>
{%- endmacro -%}

{#
    Renders entity label by it's field. In case if VIEW permission is notgranted, returns
    the 'view entity_name' string in case if entityLabelIfNotGranted was set and empty string otherwise
    Parameters:
        entity - Entity whete field value should be takes
        fieldName - Field name wich value should be rendered
        entityLabelIfNotGranted - Entity label that should be rendered in case if user have no access to see field value
#}
{%- macro renderEntityViewLabel(entity, fieldName, entityLabelIfNotGranted = null) -%}
    {% if entity is not null and is_granted('VIEW', entity, fieldName) %}
        {{ attribute(entity, fieldName) }}
    {% else %}
        {% if entityLabelIfNotGranted is not null %}
            {{ 'view %entityName%'|trans({'%entityName%' : entityLabelIfNotGranted|trans}) }}
        {% endif %}
    {% endif %}
{%- endmacro -%}

{%- macro renderJsTree(data, actions) -%}
    {% embed "@OroUI/jstree.html.twig" with {
        data: data,
        actions: actions
    } %}
    {% endembed %}
{%- endmacro -%}

{% macro app_logo(organization_name) %}
    {% set organization_name = organization_name|default('') %}
    <a href="{{ path('oro_default') }}" class="app-logo" title="{{- organization_name|trim -}}">{{- organization_name|trim -}}</a>
{% endmacro %}

{% macro insertIcon(classNames) %}
    {% set classNames = classNames|default('') %}

    {% if classNames %}
        <span class="{{ classNames }}" aria-hidden="true"></span>
    {% endif %}
{% endmacro %}

{#
    Render sortable list for configuration options
    Parameters:
        widget - form widget data
        attr - block attributes
        options - additional options
            - collection_class - Main class for sortable list,
            - add_btn_label - Text label for add item button,
            - column_label - Main column label,
            - column_options_label - Options column label
            - data_page_component_module - Class for data-page-component-module attribute
            - show_form_when_empty - Show select box when a form is empty
#}
{% macro sortable_list_view(widget, attr = {}, options = {}) %}
    {% set originalAttr = attr %}
    {% import _self as UIMacro %}

    {% if widget.vars.prototype is defined %}
        {% set prototype_html = UIMacro.sortable_list_view_collection_prototype(widget, options, attr) %}
    {% endif %}

    {% set attr = attr|merge({'class': (attr.class is defined ? attr.class ~ ' ' : '') ~ 'oro-item-collection grid-container' }) %}
    {% set id = widget.vars.id ~ '_collection' %}
    <div class="{{ options.collection_class|default('') }} drag-n-drop-sorting-view" {% if options.data_page_component_module is defined %} data-page-component-module="{{ options.data_page_component_module|escape }}"{% endif %}>
        <div class="drag-n-drop-sorting-view__wrapper row-oro" {{ UIMacro.renderPageComponentAttributes({
            module: 'oroui/js/app/components/view-component',
            options: {
                view: 'oroui/js/drag-n-drop-sorting',
                autoRender: true
            }
        }) }}>
            {% set prototype_name = widget.vars.prototype_name %}
           <div {{ UIMacro.attributes(attr) }}>
                <table class="grid grid-main-container table-hover table table-bordered">
                    <thead>
                    <tr>
                        <th class="drag-n-drop-sorting-view__column" scope="col"><span>{{ options.column_label|default('') }}</span></th>
                        <th class="drag-n-drop-sorting-view__column_options" scope="col"><span>{{ options.column_options_label|default('') }}</span></th>
                        {% if form.mergeAllowed is defined %}
                            <th></th>
                        {% endif %}
                    </tr>
                    </thead>
                    <tbody class="sortable-wrapper" data-last-index="{{ widget.children|length}}" data-prototype-name="{{ prototype_name }}"{% if prototype_html is defined %} data-prototype="{{ prototype_html|escape }}"{% endif %}>
                    {% if widget.children|length %}
                        {% for child in widget.children %}
                            {% set widgetContainerAttributes = originalAttr|filter((v, k) => k not in  ['id', 'class']) %}
                            {{ UIMacro.sortable_list_view_collection_prototype(child, options, widgetContainerAttributes) }}
                        {% endfor %}
                    {% elseif options.show_form_when_empty is defined and prototype_html is defined %}
                        {{ prototype_html|replace({(prototype_name): '0'})|raw }}
                    {% endif %}
                    </tbody>
                </table>
            </div>
            <button type="button" class="btn add-list-item" data-container=".oro-item-collection tbody">
                {{ options.add_btn_label|default('') }}
            </button>
        </div>
    </div>
{% endmacro %}

{% macro sortable_list_view_collection_prototype(widget, options, widgetContainerAttributes) %}
    {% if 'collection' in widget.vars.block_prefixes %}
        {% set form = widget.vars.prototype %}
        {% set name = widget.vars.full_name ~ '[' ~ widget.vars.prototype.vars.name ~ ']' %}
    {% else %}
        {% set form = widget %}
        {% set name = widget.vars.full_name %}
    {% endif %}
    {% apply spaceless %}
        {% import _self as UIMacro %}
        {% if 'data-validation-optional-group' not in widgetContainerAttributes %}
            {% set widgetContainerAttributes = widgetContainerAttributes|merge({'data-validation-optional-group': ''}) %}
        {% endif %}
        <tr data-content="{{ name }}" {{ UIMacro.attributes(widgetContainerAttributes) }}
            class="{{ options.collection_class|default('') }}">
        {{ form_widget(form) }}
    </tr>
    {% endapply %}
{% endmacro %}

{% macro render_birthday(birthday) %}
    {% if birthday is not empty %}
        {{ birthday|oro_format_date }}
        {% set age = birthday|age_string %}
        {{ age is not empty ? '(' ~ age ~ ')': null }}
    {% else %}
        {{ 'N/A'|trans }}
    {% endif %}
{% endmacro %}

{% macro badge(label, badgeClass = 'info', iconClass = 'fa-circle') %}
    <span class="badge badge-pill badge-{{ badgeClass }} status-{{ badgeClass }}">
        <i class="icon-status-{{ badgeClass }} {{ iconClass }}" aria-hidden="true"></i>{{ label }}
    </span>
{% endmacro %}

{%- macro renderWysiwygContentPreview(content) -%}
    {%- apply spaceless -%}
        {% if content is not empty %}
            <div data-page-component-view="oroentityconfig/js/views/wysiwyg-content-preview">{{ content|render_content|oro_html_sanitize }}</div>
        {% endif %}
    {%- endapply -%}
{%- endmacro -%}

{% macro renderCollapsibleWysiwygContentPreview(content, entity = null, fieldName = null, previewMessage = 'oro.ui.simplified_preview.message', moreText = 'oro.ui.collapse.more', lessText = 'oro.ui.collapse.less', noDataMessage = 'oro.ui.empty') %}
    {%- if entity is empty or fieldName is empty or is_granted('VIEW', entity, fieldName) -%}
        {%- import _self as UIMacro -%}
        {%- if content|trim is not empty -%}
            {%- if previewMessage is not empty -%}
                <div class="alert alert-info alert--compact" role="alert">
                    <span class="fa-info alert-icon" aria-hidden="true"></span>
                    {{ previewMessage|trans }}
                </div>
            {%- endif -%}
            <div class="cms-content">
                {{- UIMacro.renderCollapsibleHtml(UIMacro.renderWysiwygContentPreview(content), entity, fieldName, moreText, lessText) -}}
            </div>
        {%- elseif noDataMessage is not empty -%}
            <div class="no-data">{{ noDataMessage|trans }}</div>
        {%- endif %}
    {%- endif -%}
{% endmacro %}

{% macro renderButtonsRow(content) %}
<div class="buttons-row {% if isDesktopVersion() %}buttons-row--start-offset buttons-row--pull-end{% else %}buttons-row--bottom-offset{% endif %}">
    {{ content }}
</div>
{% endmacro %}

{#
Renders a link with javascript handler or regular 'add' link
regarding of 'oro_ui.quick_create_actions_window_target' configuration value

Parameters - array:
    [
        'dataUrl' - used as a dataUrl parameter for widget or path for page
        'title' - button title
        'label' - button label
        'widget' - array [
            'reload-grid-name' - grid name that should be reloaded
            'options' - array [
                'alias' - widget alias
                'dialogOptions' - array [
                    'title' - dialog window title
                ]
            ]
        ]
    ]
#}
{% macro quickAccessLink(parameters) %}
    {% import _self as UIMacro %}

    {% set quickCreateAction = oro_config_value('oro_ui.quick_create_actions') %}

    {% set defaultParameters = {
        'iCss': 'fa-plus',
        'class': 'dropdown-item',
    } %}

    {% if quickCreateAction == 'popup' %}
        {% set clientLinkParameters = defaultParameters|merge({
            'widget': {
                'type': 'dialog',
                'multiple': false,
                'options': {
                    'dialogOptions': {
                        'allowMaximize': true,
                        'allowMinimize': true,
                        'dblclick': 'maximize',
                        'maximizedHeightDecreaseBy': 'minimize-bar',
                        'autoResize': true,
                        'width': 812,
                        'minWidth': 'expanded',
                        'modal': false
                    }
                }
            }
        }) %}
        {{ UIMacro.clientLink(clientLinkParameters|merge_recursive(parameters)) }}
    {% else %}
        {% set linkParameters = defaultParameters
            |merge(parameters)
            |merge({
                'path': parameters.dataUrl,
                'target': quickCreateAction == 'current_page' ? '_self' : '_blank'
            })
            |filter((v, k) => k != 'widget' and k != 'dataUrl')
        %}
        {{ UIMacro.link(linkParameters) }}
    {% endif %}
{% endmacro %}

{#
Renders a button with javascript handler or regular 'add' button
regarding of 'oro_ui.quick_create_actions' configuration value

Parameters - array:
    [
        'title' - button title
        'label' - button label
        'dataUrl' - used as a dataUrl parameter for widget or as a path for regular 'add' button
        'widget' - options to define a widget on the control
    ]
#}
{% macro quickAccessAddButton(parameters) %}
    {% import _self as UIMacro %}

    {% set defaultParameters = {
        'class': 'btn main-group btn-primary pull-right',
        'role': 'button'
    } %}

    {{ UIMacro.quickAccessLink(defaultParameters|merge(parameters)) }}
{% endmacro %}

{#
Renders a button with javascript handler or regular button
regarding of 'oro_ui.quick_create_actions' configuration value

Parameters - array:
    [
        'title' - button title
        'label' - button label
        'dataUrl' - used as a dataUrl parameter for widget or as a path for regular button
        'widget' - options to define a widget on the control
    ]
#}
{% macro quickAccessButton(parameters) %}
    {% import _self as UIMacro %}

    {% set defaultParameters = {
        'class': 'btn back icons-holder-text',
        'role': 'button'
    } %}

    <div class="pull-left btn-group icons-holder">
        {{ UIMacro.quickAccessLink(defaultParameters|merge(parameters)) }}
    </div>
{% endmacro %}
