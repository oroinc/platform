import mediator from 'oroui/js/mediator';
import PageRegionView from 'oroui/js/app/views/base/page-region-view';
const document = window.document;
let titleRendered = null;

const BookmarkButtonView = PageRegionView.extend({
    pageItems: ['navigationElements', 'titleShort', 'titleSerialized'],

    /**
     * Type of element will be used to check that this navigation element enabled for current page. Data comes
     * from backend generated by NavigationElementsContentProvider
     *
     * @type string
     */
    navigationElementType: null,

    events: {
        click: 'onToggle'
    },

    listen: {
        'add collection': 'updateState',
        'remove collection': 'updateState',
        'reset collection': 'updateState',
        'page:afterChange mediator': 'updateState',
        'route:change mediator': 'updateState'
    },

    /**
     * @inheritdoc
     */
    constructor: function BookmarkButtonView(options) {
        BookmarkButtonView.__super__.constructor.call(this, options);
    },

    /**
     * @inheritdoc
     */
    initialize: function(options) {
        if (!options.navigationElementType) {
            throw new Error('"navigationItemElementType" is required option for bookmark button');
        }

        this.navigationElementType = options.navigationElementType;

        // handles page update
        mediator.on('page:update', function(page, args) {
            titleRendered = page.title;
        });
    },

    render: function() {
        this.updateState();

        const data = this.getTemplateData();
        if (!data || !data.navigationElements) {
            // no data, it is initial auto render, skip rendering
            return this;
        }

        if (data.navigationElements[this.navigationElementType]) {
            this.$el.removeClass('hide');
            if (data.titleShort) {
                this.$el.data('title-rendered-short', data.titleShort);
            }
            /**
             * Setting serialized titles for pinbar button
             */
            if (data.titleSerialized) {
                const titleSerialized = JSON.parse(data.titleSerialized);
                if (titleSerialized.template) {
                    this.$el.data('title', titleSerialized);
                }
            }
        } else {
            this.$el.addClass('hide');
        }

        return this;
    },

    updateState: function() {
        const model = this.collection.getCurrentModel();
        this.$el.toggleClass('gold-icon', Boolean(model));
    },

    onToggle: function() {
        let attrs;
        let Model;
        let model = this.collection.getCurrentModel();
        if (model) {
            this.collection.trigger('toRemove', model);
        } else {
            Model = this.collection.model;
            attrs = this.getItemAttrs();
            model = new Model(attrs);
            this.collection.trigger('toAdd', model);
        }
    },

    getItemAttrs: function() {
        const title = this.$el.data('title');
        return {
            url: mediator.execute('currentUrl'),
            title_rendered: titleRendered || this.$el.data('title-rendered'),
            title_rendered_short: this.$el.data('title-rendered-short') || document.title,
            title: title ? JSON.stringify(title) : '{"template": "' + document.title + '"}'
        };
    }
});

export default BookmarkButtonView;
